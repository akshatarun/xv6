From 055b597177b369e9f047372ee5c8154859fa4c7d Mon Sep 17 00:00:00 2001
From: ad1tyat <adityatrivedi25@gmail.com>
Date: Sun, 31 Oct 2021 22:38:18 +0530
Subject: [PATCH] Completed Part B

---
 Makefile  |   3 +-
 defs.h    |  17 ++
 kalloc.c  |  14 ++
 memtest.c |  46 ++++
 mmu.h     |   1 +
 param.h   |   2 +-
 proc.c    | 678 +++++++++++++++++++++++++++++++++++++++++++++---------
 proc.h    |   1 +
 trap.c    |  36 ++-
 vm.c      |  24 +-
 10 files changed, 709 insertions(+), 113 deletions(-)
 create mode 100644 memtest.c

diff --git a/Makefile b/Makefile
index 09d790c..d278adc 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_memtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,7 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c memtest.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..1d19e8e 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct requestQueue;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,18 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void 			create_kernel_process(const char *name, void (*entrypoint)());
+void 			swapOutProcessMethod();
+void            swapInProcessMethod();
+extern int formed;
+extern int formed2;
+extern struct requestQueue request;
+extern struct requestQueue request2;
+void requestEnqueue(struct proc *p);
+struct proc* requestDequeue();
+void requestEnqueue2(struct proc *p);
+struct proc* requestDequeue2();
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -164,6 +177,7 @@ void            idtinit(void);
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+extern struct spinlock swap_in_lock;
 
 // uart.c
 void            uartinit(void);
@@ -185,6 +199,9 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+extern 			void * chan;
+extern struct spinlock chanLock;
+extern uint areSleepingonChan;
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..b62145b 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -56,6 +56,19 @@ freerange(void *vstart, void *vend)
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
 // initializing the allocator; see kinit above.)
+
+void wakeUpOnChan(){
+  if(kmem.use_lock){
+    acquire(&chanLock);
+  }
+  if(areSleepingonChan){
+    wakeup(chan);
+    areSleepingonChan = 0;
+  }
+  if(kmem.use_lock)
+    release(&chanLock);
+}
+
 void
 kfree(char *v)
 {
@@ -74,6 +87,7 @@ kfree(char *v)
   kmem.freelist = r;
   if(kmem.use_lock)
     release(&kmem.lock);
+  wakeUpOnChan();
 }
 
 // Allocate one 4096-byte page of physical memory.
diff --git a/memtest.c b/memtest.c
new file mode 100644
index 0000000..f38a4bc
--- /dev/null
+++ b/memtest.c
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "user.h"
+
+#define CRCT(x) 4096 - x
+
+int numGenerator(int num){
+	int smallNum = num%10;
+	return (5*smallNum + 7*smallNum*smallNum + 18*smallNum*smallNum*smallNum + 55*smallNum*smallNum*smallNum*smallNum);
+	/*
+	5, 7, 18 and 55 are our Roll Nums :)
+	*/
+}
+
+void validator(int ind, int num, int* correct){
+	if (numGenerator(ind) == num) *correct+=4;
+	return;
+}
+
+int main(int argc, char *argv[])
+{    
+    for (int i=1; i<=20; i++)
+        if (!fork()){
+            int *ptr[10];
+			printf(1, "CHILD: %d\n", i);
+			for (int j=0; j<10; j++) {
+				ptr[j] = (int *)malloc(4096);
+				for (int k=0; k<1024; k++)
+					ptr[j][k] = numGenerator(k);
+			}
+			
+			for (int j=0; j<10; j++){ 
+				int correctBytes=0;
+				for (int k=0; k<1024; k++){
+					validator(k,ptr[j][k],&correctBytes);
+				}
+				printf(1,"Iteration #%d: Incorrect Bytes: %d\n",j+1,CRCT(correctBytes));
+			}
+			printf(1,"\n");
+			exit();
+		}
+    
+    for (int i=0; i<20; i++){
+        wait();
+	}
+    exit();
+}
\ No newline at end of file
diff --git a/mmu.h b/mmu.h
index a82d8e2..5238a1c 100644
--- a/mmu.h
+++ b/mmu.h
@@ -94,6 +94,7 @@ struct segdesc {
 #define PTE_P           0x001   // Present
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
+#define PTE_R           0x020   //Using the 6th bit as the reference bit
 #define PTE_PS          0x080   // Page Size
 
 // Address in page table or page directory entry
diff --git a/param.h b/param.h
index a7e90ef..1d8ea44 100644
--- a/param.h
+++ b/param.h
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff --git a/proc.c b/proc.c
index 806b1b1..0231166 100644
--- a/proc.c
+++ b/proc.c
@@ -1,13 +1,19 @@
+
 #include "types.h"
 #include "defs.h"
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
+#include "stat.h"
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
-
-struct {
+#include "fcntl.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -15,37 +21,444 @@ struct {
 static struct proc *initproc;
 
 int nextpid = 1;
+int formed = 0;
+int formed2 = 0;
+
+int fileNaming(struct proc *myprocess, char *str, int virtAddr);
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
 extern void forkret(void);
 extern void trapret(void);
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+struct requestQueue
+{
+  struct spinlock lock;
+  struct proc *req[NPROC];
+  int head;
+  int tail;
+  void *chan;
+};
+struct requestQueue request;
+struct requestQueue request2;
+struct proc *requestDequeue()
+{
+
+  acquire(&request.lock);
+  if (request.head == request.tail)
+  {
+    release(&request.lock);
+    return 0;
+  }
+  else
+  {
+    struct proc *p = request.req[request.head];
+    (request.head)++;
+    (request.head) %= NPROC;
+    release(&request.lock);
+    return p;
+  }
+}
+
+void requestEnqueue(struct proc *p)
+{
+  acquire(&request.lock);
+  if (request.head != (request.tail + 1) % NPROC)
+  {
+    request.req[request.tail] = p;
+    request.tail = ((request.tail) + 1) % NPROC;
+  }
+  release(&request.lock);
+}
+
+struct proc *requestDequeue2()
+{
+
+  acquire(&request2.lock);
+  if (request2.head == request2.tail)
+  {
+    release(&request2.lock);
+    return 0;
+  }
+  else
+  {
+    struct proc *p = request2.req[request2.head];
+    (request2.head)++;
+    (request2.head) %= NPROC;
+    release(&request2.lock);
+    return p;
+  }
+}
+
+void requestEnqueue2(struct proc *p)
+{
+  acquire(&request2.lock);
+  if (request2.head != (request2.tail + 1) % NPROC)
+  {
+    request2.req[request2.tail] = p;
+    request2.tail = ((request2.tail) + 1) % NPROC;
+  }
+  release(&request2.lock);
+}
+
+void initRequestQueue(struct requestQueue *r)
+{
+  r->head = 0;
+  r->tail = 0;
+}
+
+int readSwapFile(int fd, int n, char *p)
+{
+  // directly taken from inbuilt function in sysfile.c
+  struct file *f;
+  if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+int closeSwapFile(int fd)
+{
+  // directly taken from inbuilt function in sysfile.c
+  struct file *f;
+
+  if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int writeSwapFile(int fd, char *p, int n)
+{
+  // directly taken from inbuilt function in sysfile.c
+  struct file *f;
+  if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+static struct inode *
+createSwapFile(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if ((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if ((ip = dirlookup(dp, name, 0)) != 0)
+  {
+    iunlockput(dp);
+    ilock(ip);
+    if (type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if ((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if (type == T_DIR)
+  {              // Create . and .. entries.
+    dp->nlink++; // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if (dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if (dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+static int
+proc_fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd] == 0)
+    {
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int proc_open(char *path, int omode)
+{
+
+  int fd;
+  struct file *f;
+  struct inode *ip;
+
+  begin_op();
+
+  if (omode & O_CREATE)
+  {
+    ip = createSwapFile(path, T_FILE, 0, 0);
+    if (ip == 0)
+    {
+      end_op();
+      return -1;
+    }
+  }
+  else
+  {
+    if ((ip = namei(path)) == 0)
+    {
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if (ip->type == T_DIR && omode != O_RDONLY)
+    {
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if ((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0)
+  {
+    if (f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+pte_t *findVictim(pde_t *pgdir, int *va)
+{
+  while (1)
+  {
+    for (int i = 0; i < NPDENTRIES; i++)
+    {
+      pte_t *ipgdir = (pte_t *)P2V(PTE_ADDR(pgdir[i]));
+      for (int j = 0; j < NPTENTRIES; j++)
+      {
+        if (!(ipgdir[j] & PTE_P))
+        {
+          continue;
+        }
+        if (ipgdir[j] & PTE_R)
+        {
+          ipgdir[j] ^= PTE_R;
+        }
+        else
+        {
+          *va = ((1 << 22) * i) + ((1 << 12) * j);
+          pte_t *pte = (pte_t *)P2V(PTE_ADDR(ipgdir[j]));
+          memset(&ipgdir[j], 0, sizeof(ipgdir[j]));
+          ipgdir[j] = ((ipgdir[j]) ^ (0x080));
+          return pte;
+        }
+      }
+    }
+  }
+  return 0;
+}
+void convertToString(int a1, char *s)
+{
+  int a=a1;
+  if (a > 0)
+  {
+    int i = 0;
+    while (a > 0)
+    {
+      s[i] = (a % 10 + '0');
+      a /= 10;
+      i++;
+    }
+    for (int j = 0; j < i / 2; j++)
+    {
+      char c = s[j];
+      s[j] = s[i - j];
+      s[i - j] = c;
+    }
+    s[i] = '\0';
+  }
+  else
+  {
+    s[0] = '0';
+    s[1] = '\0';
+  }
+}
+void processReseter(struct proc* p){
+  p->killed = 0;
+  p->state = UNUSED;
+  p->parent = 0;
+  p->name[0] = '*';
+}
+void swapOutProcessMethod()
+{
+  acquire(&request.lock);
+  while (request.head != request.tail){
+
+    struct proc *p = requestDequeue();
+    pde_t *outerPgDir = p->pgdir;
+    
+    int va;
+    pte_t *pte = findVictim(outerPgDir, &va);
+    
+    
+    char c[50];
+    int converted = fileNaming(p, c, va);
+    if(!converted){
+      panic("error in file naming process in swap in");
+    }
+
+
+    int fd1 = proc_open(c, O_RDWR | O_CREATE);
+
+    if(fd1 == -1){
+      release(&request.lock);
+      panic("proc_open error in swap out process");
+    }  
+    else{
+      int fd2 = writeSwapFile(fd1, (char *)pte, PGSIZE);
+      if (fd2 == -1){
+        release(&request.lock);
+        panic("proc write error in swap out process");
+      }
+      else{
+        int fd3=closeSwapFile(fd1);
+        if(fd3 == -1){
+          release(&request.lock);
+          panic("proc close error in swap out process");
+        }
+        else{
+          kfree((char *)pte);
+        }
+      }
+    }
+  }
+  release(&request.lock);
+
+  struct proc *p;
+  if ((p = myproc()) == 0)
+  {
+    panic("swap out process");
+  }
+  formed = 0;
+  processReseter(p);
+  sched();
+}
+
+int fileNaming(struct proc *myprocess, char *str, int virtAddr){
+  
+  convertToString(myprocess->pid,str);
+  int ind=strlen(str);
+  str[ind]='_';
+  convertToString(virtAddr,str+ind+1);
+  
+  ind = strlen(str);
+
+  safestrcpy(str+ind,".swp",5);
+  
+  return (ind > 0);
+}
+
+void swapInProcessMethod(){
+
+	acquire(&request2.lock);
+	while(request2.head != request2.tail){
+
+		struct proc *p=requestDequeue2();
+
+		int va=PTE_ADDR(p->addr);
+		
+    char c[50];
+    int converted = fileNaming(p, c, va);
+    if(!converted){
+      panic("error in file naming process in swap in");
+    }
+
+    int fd1 = proc_open(c,O_RDONLY);
+
+    if(fd1>=0){
+      char *mem=kalloc();
+      int fd2 = readSwapFile(fd1,PGSIZE,mem);
+      if(fd2 >= 0){
+        if(mappages(p->pgdir, (void *)va, PGSIZE, V2P(mem), PTE_W|PTE_U)<0){
+          release(&request2.lock);
+          panic("mappages");
+        }
+      }else{
+        panic("file read incorrectly");
+      }
+      wakeup(p);
+    }else{
+      release(&request2.lock);
+      panic("proc_open error in swap_in");
+    }
+	}
+
+    release(&request2.lock);
+    struct proc *p;
+	if((p=myproc())==0)
+	  panic("swap_in_process");
+
+	formed2=0;
+	processReseter(p);
+	sched();
+
+}
+
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&chanLock, "chan");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +467,9 @@ mycpu(void)
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -70,7 +484,7 @@ myproc(void) {
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +492,8 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -92,7 +506,8 @@ found:
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,15 +515,15 @@ found:
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
@@ -117,16 +532,27 @@ found:
 
 //PAGEBREAK: 32
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
+  //formed=0;
+  initlock(&request.lock, "request");
+  initlock(&request2.lock, "request2");
+
+  acquire(&request.lock);
+  initRequestQueue(&request);
+  release(&request.lock);
+
+  acquire(&request2.lock);
+  initRequestQueue(&request2);
+  release(&request2.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +563,7 @@ userinit(void)
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -155,18 +581,20 @@ userinit(void)
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +605,21 @@ growproc(int n)
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -203,8 +632,8 @@ fork(void)
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -224,19 +653,20 @@ fork(void)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -253,10 +683,12 @@ exit(void)
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,22 +701,24 @@ exit(void)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,13 +735,14 @@ wait(void)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); //DOC: wait-sleep
   }
 }
 
@@ -319,21 +754,22 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state != RUNNABLE)
         continue;
 
       // Switch to chosen process.  It is the process's job
@@ -351,7 +787,6 @@ scheduler(void)
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -362,19 +797,18 @@ scheduler(void)
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,10 +816,9 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); //DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -393,14 +826,14 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +847,14 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +863,9 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock)
+  {                        //DOC: sleeplock0
+    acquire(&ptable.lock); //DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,7 +878,8 @@ sleep(void *chan, struct spinlock *lk)
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { //DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
@@ -459,14 +893,13 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
       p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,17 +909,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -500,35 +934,67 @@ kill(int pid)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
   }
 }
+
+void create_kernel_process(const char *name, void (*entrypoint)())
+{
+
+  struct proc *p;
+  p = allocproc();
+
+  if (p == 0)
+  {
+    panic("Kernel Process not created");
+  }
+
+  if ((p->pgdir = setupkvm()) == 0)
+  {
+    kfree(p->kstack);
+    panic("Page table not setup");
+  }
+  //Since it is a kernel process, trap frame need not be initialised (only for user soace processes.
+
+  p->sz = PGSIZE;
+  p->parent = initproc;
+  p->cwd = idup(initproc->cwd);
+  //names the process
+  safestrcpy(p->name, name, sizeof(p->name));
+
+  acquire(&ptable.lock);
+  //entrypoint becomes next instruction to be executed
+  p->context->eip = (uint)entrypoint;
+  p->state = RUNNABLE;
+
+  release(&ptable.lock);
+}
diff --git a/proc.h b/proc.h
index 1647114..85a9716 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int addr;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/trap.c b/trap.c
index 41c66eb..cadba52 100644
--- a/trap.c
+++ b/trap.c
@@ -14,6 +14,8 @@ extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
 
+struct spinlock swap_in_lock;
+
 void
 tvinit(void)
 {
@@ -32,6 +34,16 @@ idtinit(void)
   lidt(idt, sizeof(idt));
 }
 
+int wasSwappedOut(struct proc* p, int addr){
+  pde_t *outer_pgdir = &(p->pgdir)[PDX(addr)];
+  pte_t *inner_pgdir = (pte_t*)P2V(PTE_ADDR(*outer_pgdir));
+
+  acquire(&swap_in_lock);
+  sleep(p,&swap_in_lock);
+  
+  return (inner_pgdir[PTX(addr)])&0x080;
+}
+
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
@@ -56,6 +68,24 @@ trap(struct trapframe *tf)
     }
     lapiceoi();
     break;
+  case T_PGFLT:
+    ;
+    int virtualFaultAddress=rcr2();
+    struct proc *p=myproc();
+    
+    if(wasSwappedOut(p, virtualFaultAddress)){
+      p->addr = virtualFaultAddress;
+      requestEnqueue2(p);
+      if(!formed2){
+        formed2=1;
+        create_kernel_process("swap_in_process", &swapInProcessMethod);
+      }
+    } 
+    else {
+      exit();
+    }
+  break;
+
   case T_IRQ0 + IRQ_IDE:
     ideintr();
     lapiceoi();
@@ -102,9 +132,9 @@ trap(struct trapframe *tf)
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff --git a/vm.c b/vm.c
index 7134cff..acc40dd 100644
--- a/vm.c
+++ b/vm.c
@@ -6,6 +6,11 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
+
+void* chan;
+struct spinlock chanLock;
+uint areSleepingonChan = 0;
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
@@ -57,7 +62,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -218,6 +223,20 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
+
+void startSwapOut(){
+  requestEnqueue(myproc());
+  if(!formed){
+    formed = 1;
+    create_kernel_process("swapOutProcess", &swapOutProcessMethod);
+  }
+  // sleep(chan,&chanLock);
+  acquire(&chanLock);
+  areSleepingonChan = 1;
+  sleep(chan, &chanLock);
+  release(&chanLock);
+}
+
 int
 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
@@ -233,8 +252,9 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      cprintf("allocuvm out of memory\n");
+      //cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
+      startSwapOut();
       return 0;
     }
     memset(mem, 0, PGSIZE);
-- 
2.25.1

